# -*- encoding: utf-8 -*-

require File.expand_path("../../helpers", __FILE__)

class LexerLiterals < Test::Unit::TestCase

  tests = {
    # ascii, single byte characters
    'a' => {
      0     => [:literal,     :literal,       'a',        0, 1, 0],
    },

    'ab+' => {
      0     => [:literal,     :literal,       'a',        0, 1, 0],
      1     => [:literal,     :literal,       'b',        1, 2, 0],
      2     => [:quantifier,  :one_or_more,   '+',        2, 3, 0],
    },


    # 2 byte wide characters, Arabic
    'ÿß' => {
      0     => [:literal,     :literal,       'ÿß',        0, 2, 0],
    },

    'aÿßbÿ®cÿ™' => {
      0     => [:literal,     :literal,       'aÿßbÿ®cÿ™',   0, 9, 0],
    },

    'aÿßbÿ®ÿ™?' => {
      0     => [:literal,     :literal,       'aÿßbÿ®',     0, 6, 0],
      1     => [:literal,     :literal,       'ÿ™',        6, 8, 0],
      2     => [:quantifier,  :zero_or_one,   '?',        8, 9, 0],
    },

    'aÿß?bÿ®cÿ™+' => {
      0     => [:literal,     :literal,       'a',        0, 1, 0],
      1     => [:literal,     :literal,       'ÿß',        1, 3, 0],
      2     => [:quantifier,  :zero_or_one,   '?',        3, 4, 0],
      3     => [:literal,     :literal,       'bÿ®c',      4, 8, 0],
      4     => [:literal,     :literal,       'ÿ™',        8, 10, 0],
      5     => [:quantifier,  :one_or_more,   '+',        10, 11, 0],
    },

    'a(ÿßbÿ®+)cÿ™?' => {
      0     => [:literal,     :literal,       'a',        0, 1, 0],
      1     => [:group,       :capture,       '(',        1, 2, 0],
      2     => [:literal,     :literal,       'ÿßb',       2, 5, 1],
      3     => [:literal,     :literal,       'ÿ®',        5, 7, 1],
      4     => [:quantifier,  :one_or_more,   '+',        7, 8, 1],
      5     => [:group,       :close,         ')',        8, 9, 0],
      6     => [:literal,     :literal,       'c',        9, 10, 0],
      7     => [:literal,     :literal,       'ÿ™',        10, 12, 0],
      8     => [:quantifier,  :zero_or_one,   '?',        12, 13, 0],
    },


    # 3 byte wide characters, Japanese
    'ab?„Çå„Åæ„Åô+cd' => {
      0     => [:literal,     :literal,       'a',        0, 1, 0],
      1     => [:literal,     :literal,       'b',        1, 2, 0],
      2     => [:quantifier,  :zero_or_one,   '?',        2, 3, 0],
      3     => [:literal,     :literal,       '„Çå„Åæ',     3, 9, 0],
      4     => [:literal,     :literal,       '„Åô',       9, 12, 0],
      5     => [:quantifier,  :one_or_more,   '+',        12, 13, 0],
      6     => [:literal,     :literal,       'cd',       13, 15, 0],
    },


    # 4 byte wide characters, Osmanya
    'êíÄêíÅ?êíÇab+êíÉ' => {
      0     => [:literal,     :literal,       'êíÄ',        0, 4, 0],
      1     => [:literal,     :literal,       'êíÅ',        4, 8, 0],
      2     => [:quantifier,  :zero_or_one,   '?',        8, 9, 0],
      3     => [:literal,     :literal,       'êíÇa',       9, 14, 0],
      4     => [:literal,     :literal,       'b',        14, 15, 0],
      5     => [:quantifier,  :one_or_more,   '+',        15, 16, 0],
      6     => [:literal,     :literal,       'êíÉ',        16, 20, 0],
    },

    'muùÑû?si*ùÑ´c+' => {
      0     => [:literal,     :literal,       'mu',       0, 2, 0],
      1     => [:literal,     :literal,       'ùÑû',        2, 6, 0],
      2     => [:quantifier,  :zero_or_one,   '?',        6, 7, 0],
      3     => [:literal,     :literal,       's',        7, 8, 0],
      4     => [:literal,     :literal,       'i',        8, 9, 0],
      5     => [:quantifier,  :zero_or_more,  '*',        9, 10, 0],
      6     => [:literal,     :literal,       'ùÑ´',        10, 14, 0],
      7     => [:literal,     :literal,       'c',        14, 15, 0],
      8     => [:quantifier,  :one_or_more,   '+',        15, 16, 0],
    },
  }

  count = 0
  tests.each do |pattern, checks|
    define_method "test_lex_literal_runs_#{count+=1}" do

      tokens = RL.scan(pattern)
      checks.each do |offset, token|
        assert_equal( token, tokens[offset].to_a )
      end

    end
  end

  def test_lex_single_2_byte_char
    tokens = RL.scan('ÿß+')
    assert_equal( 2, tokens.length )
  end

  def test_lex_single_3_byte_char
    tokens = RL.scan('„Çå+')
    assert_equal( 2, tokens.length )
  end

  def test_lex_single_4_byte_char
    tokens = RL.scan('ùÑû+')
    assert_equal( 2, tokens.length )
  end

end
