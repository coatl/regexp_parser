= Regexp::Parser

  Note "This project is in its early stages of development."
  Warn "Names and structures are still moving and changing."


== What?
A ruby library to help with lexing, parsing, and transforming regular expressions.

* Multilayered

  * A scanner based on ragel[http://www.complang.org/ragel/]
  * A lexer that produces a "stream" of tokens
  * A parser that produces a "tree" of Regexp::Expression objects (OO API)

* Lexes and parses both 1.8 and 1.9 regular expression flavors
* Supports ruby 1.8 and 1.9 runtime


== Components
=== Scanner
A ragel generated scanner that recognizes the cumulative syntax of both
supported flavors. Breaks the expression's text into tokens, including
their type, token (id), text, and start/end offsets within the original
pattern.

==== Example
The following scans the given pattern and prints out the type, token, text and
start/end offsets for each token found.

  require 'regexp_parser'

  Regexp::Scanner.scan /(ab?(cd)*[e-h]+)/  do |type, token, text, ts, te|
    puts "type: #{type}, token: #{token}, text: '#{text}' [#{ts}..#{te}]"
  end

A one-liner that returns an array of the textual parts of the given pattern:

  Regexp::Scanner.scan( /(cat?([b]at)){3,5}/ ).map {|token| token[2]}
  #=> ["(", "cat", "?", "(", "[", "b", "]", "at", ")", ")", "{3,5}"]


==== Notes
  * Does basic syntax error checking, like detecting missing balancing
    punctuation and premature end of pattern. Flavor validity checks are
    performed in the lexer.

  * To keep the scanner simple(r) and fairly reusable for other uses, it
    does not perform lexical analysis on the tokens, sticking to the task
    of tokenizing and leaving lexical analysis upto to the lexer.

  * If the input is a ruby Regexp object, the scanner calls #source on it to
    get its string representation. #source does not include the options of
    expression (m, i, and x) To include the options the scan, #to_s should
    be called on the Regexp before passing it to the scanner, or any of the
    higher layers.


---
=== Syntax
Defines the supported tokens for a specific engine implementation (aka a
flavor). Syntax classes act as lookup tables, and are layered to create
flavor variations. Syntax only comes into play in the lexer.

==== Example
The following instantiates the syntax for Ruby 1.9 and checks a couple of its
implementations features, and then does the same for Ruby 1.8:

  require 'regexp_parser'

  ruby_19 = Regexp::Syntax.new 'ruby/1.9'
  ruby_19.implements? :quantifier, :zero_or_one             # => true
  ruby_19.implements? :quantifier, :zero_or_one_reluctant   # => true
  ruby_19.implements? :quantifier, :zero_or_one_possessive  # => true

  ruby_18 = Regexp::Syntax.new 'ruby/1.8'
  ruby_18.implements? :quantifier, :zero_or_one             # => true
  ruby_18.implements? :quantifier, :zero_or_one_reluctant   # => false
  ruby_18.implements? :quantifier, :zero_or_one_possessive  # => false


==== Notes
  * Variatiions on a token, for example a named group with < and > vs one with a
    pair of single quotes, are specified with an underscore followed by two
    characters appended to the base token. In the previous named group example,
    the tokens would be :named_ab (angle brackets) and :named_sq (single quotes).

==== TODO
  * Add flavor limits: like Ruby 1.8's maximum allowed number of grouped 
    expressions (253).


---
=== Lexer
Sits on top of the scanner and performs lexical analysis on the tokens that
it emits. Among its tasks are breaking quantified literal runs, collecting the
emitted token structures into an array of Token objects, calculating their
nesting depth, normalizing tokens for the parser, and checkng if the tokens
are implemented by the given syntax flavor.

Tokens objects are Structs, basically data objects, with a few helper methods,
like #next, #previous, #offsets and #length.

==== Example
The following example scans the given pattern, checks it against the ruby 1.8
syntax, and prints the token objects' text.

  require 'regexp_parser'

  Regexp::Lexer.scan /a?(b)*[c]+/, 'ruby/1.8'  do |token|
    puts "#{'  ' * token.depth}#{token.text}"
  end

A one-liner that returns an array of the textual parts of the given pattern.
Compare the output with that of the one-liner example of the Scanner.

  Regexp::Lexer.scan( /(cat?([b]at)){3,5}/ ).map {|token| token.text}
  #=> ["(", "ca", "t", "?", "(", "[", "b", "]", "at", ")", ")", "{3,5}"]

==== Notes
  * The default syntax is that of the latest released version of ruby.

  * The lexer performs some basic parsing to determine the depth of a the
    emitted tokens. This responsibility might be relegated to the scanner.


---
=== Parser
Sits on top of the lexer and transforms the "stream" of Token objects emitted
by it into a tree of Expression objects represented by an instance of the
Expression::Root class. See Expression below for more information.

==== Example

  require 'regexp_parser'

  regex = /a?(b)*[c]+/m
  root = Regexp::Parser.parse( regex.to_s, 'ruby/1.8')

  root.multiline?         # => true (aliased as m?)
  root.case_insensitive?  # => false (aliased as i?)

  root[0].expressions.each do |exp|
    if exp.quantified?
      puts "#{exp}: is quantified, min/max: #{exp.quantity.inspect}"
    end
  end

  # output
  a?: is quantified, min/max: [0, 1]
  (b)*: is quantified, min/max: [0, -1]
  [c]+: is quantified, min/max: [1, -1]


---
=== Expression
The base class of all objects returned by the parser, implements most of the
functions that are common to all expression classes.



== Scanner Syntax
The following syntax elements are supported by the scanner. 

  - Alternation: a|b|c                            ** PARSER
  - Anchors: ^, $, \b, etc.                       ** PARSER
  - Character Classes (aka Sets): [abc], [^\]]    ** SCANNER
  - Character Types: \d, \H, \s, etc.             ** PARSER
  - Escape Sequences
    - Backreference: \1 thru \9                   ** SCANNER
    - Metacharacters: \\, \+, \?, etc.            ** SCANNER

  - Grouped Expressions
    - Atomic: (?>abc)                             ** LEXER
    - Back-references:
      - Named: \k<name>                           ** LEXER
      - Nest Level: \k<n-1>                       ** LEXER
      - Numbered: \k<1>                           ** LEXER
      - Relative: \k<-2>                          ** LEXER
    - Capturing: (abc)                            ** LEXER
    - Comment: (?# comment)                       ** LEXER
    - Named: (?<name>abc)                         ** LEXER
    - Options: (?mi-x:abc)                        ** LEXER
    - Passive: (?:abc)                            ** LEXER
    - Assertions
      - Lookahead: (?=abc)                        ** LEXER
      - Negative Lookahead: (?!abc)               ** LEXER
      - Lookabehind: (?<=abc)                     ** LEXER
      - Negative Lookbehind: (?<\!abc)            ** LEXER
    - Sub-expression Calls: \g<name>, \g<1>       ** LEXER

  - Literals: abc, def?                           ** LEXER
  - POSIX classes: [:alpha:], [:print:], etc.     ** SCANNER
  - Quantifiers
    - Greedy: ?, *, +, {m,M}                      ** PARSER
    - Reluctant: ??, *?, +?, {m,M}?               ** PARSER
    - Possessive: ?+, *+, ++, {m,M}+              ** PARSER

  - String Escapes
    - Control: \C-C, \cD                          ** SCANNER
    - Hex: \x20, \x{701230}                       ** SCANNER
    - Meta: \M-c, \M-\C-C etc..                   ** REVIEW/TEST
    - Octal: \0, \01, \012                        ** SCANNER
    - Unicode: \uHHHH, \u{H+ H+}                  ** SCANNER

  - Unicode Properties: 
    - Age: \p{2.1}, \P{5.2}, etc.                 ** LEXER
    - Classes: \p{Alpha}, \P{Space}, etc.         ** LEXER
    - Derived Properties: \p{Math}, \P{Lowercase} ** LEXER
    - General Categories: \p{Lu}, \P{Cs}, etc.    ** LEXER
    - Scripts: \p{Arabic}, \P{Hiragana}           ** LEXER
    - Simple Properties: \p{Dash}, \p{Extender}   ** LEXER


  Notes with ** mean:
    MISSING:      nothing in place, or barely there
    REVIEW/TEST:  mostly there (scanner and/or lexer), but has no tests, or has problems
    SCANNER:      implemented in scanner, works, has basic tests
    LEXER:        implemented in lexer, works, has basic tests (implies scanner support, of course)
    PARSER:       implemented parser, works, has basic tests
    COMPLETE:     Fully implemented in the scanner, lexer, and parser


== References
Documentation and information being read while working on this project.

==== Ruby Flavors
* Oniguruma Regular Expressions link[http://www.geocities.jp/kosako3/oniguruma/doc/RE.txt]
* Read Ruby > Regexps link[http://ruby.runpaint.org/regexps]


==== General
* Enumerating the strings of regular languages link[http://www.cs.dartmouth.edu/~doug/nfa.ps.gz]
* Mastering Regular Expressions, By Jeffrey E.F. Friedl (1st Edition) book[http://oreilly.com/catalog/9781565922570/]
* Regular Expression Flavor Comparison link[http://www.regular-expressions.info/refflavors.html]
* Regular Expression Matching: the Virtual Machine Approach link[http://swtch.com/~rsc/regexp/regexp2.html]

==== Unicode
* Unicode Derived Properties link[http://www.unicode.org/Public/UNIDATA/DerivedCoreProperties.txt]
* Unicode Explained, By Jukka K. Korpela. book[http://oreilly.com/catalog/9780596101213]
* Unicode Property Aliases link[http://www.unicode.org/Public/UNIDATA/PropertyAliases.txt]
* Unicode Regular Expressions link[http://www.unicode.org/reports/tr18/]
* Unicode Standard Annex #44 link[http://www.unicode.org/reports/tr44/]

== Thanks
This work is based on and inspired by the hard work and ideas of many people,
directly or indirectly. The following are only a few of those that should be 
thanked.

* Adrian Thurston, for developing ragel[http://www.complang.org/ragel/].
* Caleb Clausen, for feedback, which inspired this,  valuable insights on structuring the parser,
  and lots of cool code[http://github.com/coatl].
* Jan Goyvaerts, for his excellent resource[http://www.regular-expressions.info] on regular expressions. I owe him a "steak dinner", at least.
* Run Paint Run Run, for his work on Read[http://ruby.runpaint.org/] Ruby
* Yukihiro Matsumoto, of course! For "The Ruby", of course!

== Copyright
Copyright (c) 2010 Ammar Ali. See LICENSE file for details.
